version: 2.1

# Use terraform-packer docker image to execute all jobs within
executors:
  terraform:
    docker:
      - image: hunteri/terraform-packer:latest

# Parameters can be supplied from API to create and destroy infrastructure
parameters:
  terraform-apply:
    type: boolean
    default: false
  terraform-destroy:
    type: boolean
    default: false

jobs:

  ###################################
  # configure_terraform workflow
  ###################################

  # Set AWS creds and download global vars from System Manager
  configure_terraform:
    executor: terraform
    steps:
      - checkout
      - run:
          name: Checkout hunter-ops master branch
          command: |
            git clone https://$GIT_USER:$GIT_PASS@github.com/hunt3ri/hunter-ops.git
      - run:
          name: Make .aws directory for credentials file
          command: |
            mkdir $HOME/.aws
      - run:
          name: Set Prod AWS Credentials
          command: |
            echo "[hunter_ops_prod]" >> ~/.aws/credentials
            echo "aws_access_key_id = $AWS_ACCESS_KEY_PROD" >> ~/.aws/credentials
            echo "aws_secret_access_key = $AWS_SECRET_KEY_PROD" >> ~/.aws/credentials
            echo "region = us-east-1" >> ~/.aws/credentials
            tail ~/.aws/credentials
      - run:
          name: Initialise terraform and set global vars file
          command: |
            cd ./hunter-ops/ops
            . ./setenv.sh hunter_ops_prod
            chmod +x ./utils/tfinit
      - run:
          name: Test it
          command: |
            pwd
            ls
      - persist_to_workspace:
          root: /
          paths:
            - root/.aws
            - root/project/hunter-ops

  ###################################
  # create_infrastructure workflow
  ###################################

  # Create AWS VPC for apps to run on
  create_vpc:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Create vpc
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/global/vpc
            /root/project/hunter-ops/ops/utils/tfinit
            terraform apply -auto-approve

  # Creates the Flask Bootstrap ASG and installs working application within it
  create_flask_bootstrap_asg:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Create Flask-Bootstrap ASG
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/middleware/flask_bootstrap_api
            /root/project/hunter-ops/ops/utils/tfinit
            terraform apply -auto-approve

  create_postgres_rds:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Create Postgres RDS
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/global/rds
            /root/project/hunter-ops/ops/utils/tfinit
            terraform apply -auto-approve

  create_flask_bootstrap_db:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Create Flask Bootstrap DB
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/middleware/flask_bootstrap_api/postgres
            /root/project/hunter-ops/ops/utils/tfinit
            terraform apply -auto-approve

  ###################################
  # destroy_infrastructure workflow
  ###################################

  destroy_flask_bootstrap_asg:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Destroy Flask Bootstrap ASG
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/middleware/flask_bootstrap_api
            /root/project/hunter-ops/ops/utils/tfinit
            terraform destroy -auto-approve

  destroy_postgres_rds:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Destroy Postgres RDS
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/global/rds
            /root/project/hunter-ops/ops/utils/tfinit
            terraform destroy -auto-approve

  destroy_vpc:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Destroy vpc
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/global/vpc
            /root/project/hunter-ops/ops/utils/tfinit
            terraform destroy -auto-approve

  destroy_flask_bootstrap_db:
    executor: terraform
    steps:
      # Attach to workspace defined in configure_terraform step
      - attach_workspace:
          at: /
      - run:
          name: Create Flask Bootstrap DB
          command: |
            . ./hunter-ops/ops/utils/terraform.tfvars.sh
            cd ./hunter-ops/ops/terraform/middleware/flask_bootstrap_api/postgres
            /root/project/hunter-ops/ops/utils/tfinit
            terraform destroy -auto-approve

  # Creates a small message used to stop errors if nothing to build
  welcome:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Hunter-Labs
          command: |
            echo "Hunter-Labs running"

workflows:
  version: 2

  # Stops build errors if nothing specified to run
  hunter_labs:
    when: always
    jobs:
      - welcome

  # Create all config and infrastructure to run the app on
  create_infrastructure:
    when: << pipeline.parameters.terraform-apply >>
    jobs:
      - configure_terraform
      - create_vpc:
          requires:
            - configure_terraform
      - create_postgres_rds:
          requires:
            - create_vpc
      - create_flask_bootstrap_asg:
          requires:
            - create_postgres_rds
      - create_flask_bootstrap_db:
          requires:
            - create_postgres_rds

  # Destroy all config and infrastructure to run the app on
  delete_infrastructure:
    when: << pipeline.parameters.terraform-destroy >>
    jobs:
      - configure_terraform
      - destroy_flask_bootstrap_asg:
          requires:
            - configure_terraform
      - destroy_postgres_rds:
          requires:
            - configure_terraform
      - destroy_flask_bootstrap_db:
          requires:
            - configure_terraform
      - destroy_vpc:
          requires:
            - destroy_flask_bootstrap_asg
            - destroy_postgres_rds
